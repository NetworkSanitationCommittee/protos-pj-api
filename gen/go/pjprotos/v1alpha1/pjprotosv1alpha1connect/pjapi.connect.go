// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pjprotos/v1alpha1/pjapi.proto

package pjprotosv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/networksanitationcommittee/protos-pj-api/gen/go/pjprotos/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HelloWorldServiceName is the fully-qualified name of the HelloWorldService service.
	HelloWorldServiceName = "pjprotos.v1alpha1.HelloWorldService"
)

// HelloWorldServiceClient is a client for the pjprotos.v1alpha1.HelloWorldService service.
type HelloWorldServiceClient interface {
	Hello(context.Context, *connect_go.Request[v1alpha1.HelloRequest]) (*connect_go.Response[v1alpha1.HelloResponse], error)
	CreateHello(context.Context, *connect_go.Request[v1alpha1.CreateHelloRequest]) (*connect_go.Response[v1alpha1.CreateHelloResponse], error)
}

// NewHelloWorldServiceClient constructs a client for the pjprotos.v1alpha1.HelloWorldService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHelloWorldServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HelloWorldServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &helloWorldServiceClient{
		hello: connect_go.NewClient[v1alpha1.HelloRequest, v1alpha1.HelloResponse](
			httpClient,
			baseURL+"/pjprotos.v1alpha1.HelloWorldService/Hello",
			opts...,
		),
		createHello: connect_go.NewClient[v1alpha1.CreateHelloRequest, v1alpha1.CreateHelloResponse](
			httpClient,
			baseURL+"/pjprotos.v1alpha1.HelloWorldService/CreateHello",
			opts...,
		),
	}
}

// helloWorldServiceClient implements HelloWorldServiceClient.
type helloWorldServiceClient struct {
	hello       *connect_go.Client[v1alpha1.HelloRequest, v1alpha1.HelloResponse]
	createHello *connect_go.Client[v1alpha1.CreateHelloRequest, v1alpha1.CreateHelloResponse]
}

// Hello calls pjprotos.v1alpha1.HelloWorldService.Hello.
func (c *helloWorldServiceClient) Hello(ctx context.Context, req *connect_go.Request[v1alpha1.HelloRequest]) (*connect_go.Response[v1alpha1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// CreateHello calls pjprotos.v1alpha1.HelloWorldService.CreateHello.
func (c *helloWorldServiceClient) CreateHello(ctx context.Context, req *connect_go.Request[v1alpha1.CreateHelloRequest]) (*connect_go.Response[v1alpha1.CreateHelloResponse], error) {
	return c.createHello.CallUnary(ctx, req)
}

// HelloWorldServiceHandler is an implementation of the pjprotos.v1alpha1.HelloWorldService service.
type HelloWorldServiceHandler interface {
	Hello(context.Context, *connect_go.Request[v1alpha1.HelloRequest]) (*connect_go.Response[v1alpha1.HelloResponse], error)
	CreateHello(context.Context, *connect_go.Request[v1alpha1.CreateHelloRequest]) (*connect_go.Response[v1alpha1.CreateHelloResponse], error)
}

// NewHelloWorldServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHelloWorldServiceHandler(svc HelloWorldServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/pjprotos.v1alpha1.HelloWorldService/Hello", connect_go.NewUnaryHandler(
		"/pjprotos.v1alpha1.HelloWorldService/Hello",
		svc.Hello,
		opts...,
	))
	mux.Handle("/pjprotos.v1alpha1.HelloWorldService/CreateHello", connect_go.NewUnaryHandler(
		"/pjprotos.v1alpha1.HelloWorldService/CreateHello",
		svc.CreateHello,
		opts...,
	))
	return "/pjprotos.v1alpha1.HelloWorldService/", mux
}

// UnimplementedHelloWorldServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHelloWorldServiceHandler struct{}

func (UnimplementedHelloWorldServiceHandler) Hello(context.Context, *connect_go.Request[v1alpha1.HelloRequest]) (*connect_go.Response[v1alpha1.HelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pjprotos.v1alpha1.HelloWorldService.Hello is not implemented"))
}

func (UnimplementedHelloWorldServiceHandler) CreateHello(context.Context, *connect_go.Request[v1alpha1.CreateHelloRequest]) (*connect_go.Response[v1alpha1.CreateHelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("pjprotos.v1alpha1.HelloWorldService.CreateHello is not implemented"))
}
